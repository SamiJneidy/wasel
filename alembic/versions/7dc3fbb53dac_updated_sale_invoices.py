"""updated sale invoices

Revision ID: 7dc3fbb53dac
Revises: 3e0b35cb7391
Create Date: 2025-10-15 06:39:03.425716

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '7dc3fbb53dac'
down_revision: Union[str, None] = '3e0b35cb7391'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    invoice_type_enum = postgresql.ENUM(
        'STANDARD', 'SIMPLIFIED', 
        name='invoicetype',
        create_type=False
    )
    invoice_type_code_enum = postgresql.ENUM('CREDIT_NOTE', 'DEBIT_NOTE', 'INVOICE', 
        name='invoicetypecode',
        create_type=False
    )
    payment_means_code_enum = postgresql.ENUM(
        'CASH', 'CHEQUE', 'CREDIT_TRANSFER', 'DEBIT_TRANSFER', 'PAYMENT_TO_BANK_ACCOUNT', 'BANK_CARD', 
        name='paymentmeanscode',
        create_type=False
    )
    stage_enum = postgresql.ENUM(
        'PRODUCTION', 'COMPLIANCE', 
        name='stage',
        create_type=False
    )
    tax_exemption_reason_code_enum = postgresql.ENUM(
        'VATEX_SA_29', 'VATEX_SA_29_7', 'VATEX_SA_30', 'VATEX_SA_32', 'VATEX_SA_33', 'VATEX_SA_34_1', 'VATEX_SA_34_2', 'VATEX_SA_34_3', 'VATEX_SA_34_4', 'VATEX_SA_34_5', 'VATEX_SA_35', 'VATEX_SA_36', 'VATEX_SA_EDU', 'VATEX_SA_HEA', 'VATEX_SA_MLTRY', 
        name='taxexemptionreasoncode',
        create_type=False
    )
    op.create_table('sale_invoices',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.Integer(), nullable=False),
    sa.Column('customer_id', sa.Integer(), nullable=False),
    sa.Column('invoice_type', invoice_type_enum, nullable=False),
    sa.Column('invoice_type_code', invoice_type_code_enum, nullable=False),
    sa.Column('issue_date', sa.Date(), nullable=False),
    sa.Column('issue_time', sa.String(length=15), nullable=False),
    sa.Column('document_currency_code', sa.String(length=5), server_default='SAR', nullable=False),
    sa.Column('actual_delivery_date', sa.Date(), nullable=True),
    sa.Column('payment_means_code', payment_means_code_enum, nullable=False),
    sa.Column('original_invoice_id', sa.Integer(), nullable=True),
    sa.Column('instruction_note', sa.String(length=4000), nullable=True),
    sa.Column('note', sa.String(length=4000), nullable=True),
    sa.Column('line_extension_amount', sa.DECIMAL(scale=2), nullable=False),
    sa.Column('discount_amount', sa.DECIMAL(scale=2), nullable=False),
    sa.Column('taxable_amount', sa.DECIMAL(scale=2), nullable=False),
    sa.Column('tax_amount', sa.DECIMAL(scale=2), nullable=False),
    sa.Column('tax_inclusive_amount', sa.DECIMAL(scale=2), nullable=False),
    sa.Column('payable_amount', sa.DECIMAL(scale=2), nullable=False),
    sa.Column('signed_xml_base64', sa.Text(), nullable=True),
    sa.Column('invoice_hash', sa.Text(), nullable=True),
    sa.Column('uuid', sa.UUID(), nullable=True),
    sa.Column('icv', sa.Integer(), nullable=False),
    sa.Column('pih', sa.Text(), nullable=False),
    sa.Column('base64_qr_code', sa.Text(), nullable=True),
    sa.Column('stage', stage_enum, nullable=True),
    sa.Column('zatca_response', sa.Text(), nullable=True),
    sa.Column('status_code', sa.String(length=5), nullable=True),
    sa.Column('created_at', sa.DateTime(timezone=True), server_default=sa.text('now()'), nullable=True),
    sa.Column('updated_at', sa.DateTime(timezone=True), nullable=True),
    sa.Column('created_by', sa.Integer(), nullable=True),
    sa.Column('updated_by', sa.Integer(), nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], ),
    sa.ForeignKeyConstraint(['original_invoice_id'], ['sale_invoices.id'], ),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], ),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], ),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sale_invoices_id'), 'sale_invoices', ['id'], unique=False)
    op.create_table('sale_invoices_lines',
    sa.Column('id', sa.Integer(), autoincrement=True, nullable=False),
    sa.Column('invoice_id', sa.Integer(), nullable=False),
    sa.Column('item_id', sa.Integer(), nullable=False),
    sa.Column('item_price', sa.DECIMAL(scale=2), nullable=False),
    sa.Column('price_discount', sa.DECIMAL(scale=2), nullable=False),
    sa.Column('quantity', sa.DECIMAL(scale=6), nullable=False),
    sa.Column('discount_amount', sa.DECIMAL(scale=2), nullable=False),
    sa.Column('line_extension_amount', sa.DECIMAL(scale=2), nullable=False),
    sa.Column('tax_amount', sa.DECIMAL(scale=2), nullable=False),
    sa.Column('rounding_amount', sa.DECIMAL(scale=2), nullable=False),
    sa.Column('classified_tax_category', sa.String(length=5), nullable=False),
    sa.Column('tax_rate', sa.DECIMAL(scale=2), nullable=False),
    sa.Column('tax_exemption_reason_code', tax_exemption_reason_code_enum, nullable=True),
    sa.Column('tax_exemption_reason', sa.String(length=200), nullable=True),
    sa.ForeignKeyConstraint(['invoice_id'], ['sale_invoices.id'], ondelete='CASCADE'),
    sa.ForeignKeyConstraint(['item_id'], ['items.id'], ondelete='RESTRICT'),
    sa.PrimaryKeyConstraint('id')
    )
    op.create_index(op.f('ix_sale_invoices_lines_id'), 'sale_invoices_lines', ['id'], unique=False)
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.create_table('invoices',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('invoices_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('invoice_type', postgresql.ENUM('STANDARD', 'SIMPLIFIED', name='invoicetype'), autoincrement=False, nullable=False),
    sa.Column('invoice_type_code', postgresql.ENUM('CREDIT_NOTE', 'DEBIT_NOTE', 'INVOICE', name='invoicetypecode'), autoincrement=False, nullable=False),
    sa.Column('issue_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('issue_time', sa.VARCHAR(length=15), autoincrement=False, nullable=False),
    sa.Column('document_currency_code', sa.VARCHAR(length=5), server_default=sa.text("'SAR'::character varying"), autoincrement=False, nullable=False),
    sa.Column('actual_delivery_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('payment_means_code', postgresql.ENUM('CASH', 'CHEQUE', 'CREDIT_TRANSFER', 'DEBIT_TRANSFER', 'PAYMENT_TO_BANK_ACCOUNT', 'BANK_CARD', name='paymentmeanscode'), autoincrement=False, nullable=False),
    sa.Column('original_invoice_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('instruction_note', sa.VARCHAR(length=4000), autoincrement=False, nullable=True),
    sa.Column('note', sa.VARCHAR(length=4000), autoincrement=False, nullable=True),
    sa.Column('tax_rate', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('classified_tax_category', sa.VARCHAR(length=5), autoincrement=False, nullable=False),
    sa.Column('line_extension_amount', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('discount_amount', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('taxable_amount', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('tax_amount', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('tax_inclusive_amount', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('payable_amount', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('signed_xml_base64', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('invoice_hash', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('icv', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('pih', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('base64_qr_code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tax_exemption_reason_code', postgresql.ENUM('VATEX_SA_29', 'VATEX_SA_29_7', 'VATEX_SA_30', 'VATEX_SA_32', 'VATEX_SA_33', 'VATEX_SA_34_1', 'VATEX_SA_34_2', 'VATEX_SA_34_3', 'VATEX_SA_34_4', 'VATEX_SA_34_5', 'VATEX_SA_35', 'VATEX_SA_36', 'VATEX_SA_EDU', 'VATEX_SA_HEA', 'VATEX_SA_MLTRY', name='taxexemptionreasoncode'), autoincrement=False, nullable=True),
    sa.Column('tax_exemption_reason', sa.VARCHAR(length=4000), autoincrement=False, nullable=True),
    sa.Column('stage', postgresql.ENUM('PRODUCTION', 'COMPLIANCE', name='stage'), autoincrement=False, nullable=True),
    sa.Column('zatca_response', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status_code', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='invoices_created_by_fkey'),
    sa.ForeignKeyConstraint(['original_invoice_id'], ['invoices.id'], name='invoices_original_invoice_id_fkey'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name='invoices_updated_by_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='invoices_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='invoices_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_invoices_id', 'invoices', ['id'], unique=False)
    op.create_table('invoices_lines',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('invoice_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('item_name', sa.VARCHAR(length=200), autoincrement=False, nullable=False),
    sa.Column('item_price', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('quantity', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('discount_amount', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('line_extension_amount', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('tax_amount', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('rounding_amount', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('tax_exemption_reason_code', postgresql.ENUM('VATEX_SA_29', 'VATEX_SA_29_7', 'VATEX_SA_30', 'VATEX_SA_32', 'VATEX_SA_33', 'VATEX_SA_34_1', 'VATEX_SA_34_2', 'VATEX_SA_34_3', 'VATEX_SA_34_4', 'VATEX_SA_34_5', 'VATEX_SA_35', 'VATEX_SA_36', 'VATEX_SA_EDU', 'VATEX_SA_HEA', 'VATEX_SA_MLTRY', name='taxexemptionreasoncode'), autoincrement=False, nullable=True),
    sa.Column('tax_exemption_reason', sa.VARCHAR(length=4000), autoincrement=False, nullable=True),
    sa.Column('item_unit_code', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], name='invoices_lines_invoice_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='invoices_lines_pkey')
    )
    op.create_index('ix_invoices_lines_id', 'invoices_lines', ['id'], unique=False)
    op.create_table('customer_snapshots',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('invoice_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('registration_name', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('vat_number', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('country_code', sa.VARCHAR(length=5), server_default=sa.text("'SA'::character varying"), autoincrement=False, nullable=True),
    sa.Column('street', sa.VARCHAR(length=300), autoincrement=False, nullable=True),
    sa.Column('building_number', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    sa.Column('division', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('postal_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('party_identification_scheme', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('party_identification_value', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='customer_snapshots_customer_id_fkey', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], name='customer_snapshots_invoice_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='customer_snapshots_pkey')
    )
    op.create_index('ix_customer_snapshots_id', 'customer_snapshots', ['id'], unique=False)
    op.drop_index(op.f('ix_sale_invoices_lines_id'), table_name='sale_invoices_lines')
    op.drop_table('sale_invoices_lines')
    op.drop_index(op.f('ix_sale_invoices_id'), table_name='sale_invoices')
    op.drop_table('sale_invoices')
    # ### end Alembic commands ###
