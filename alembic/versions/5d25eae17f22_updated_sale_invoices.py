"""updated sale invoices

Revision ID: 5d25eae17f22
Revises: 7dc3fbb53dac
Create Date: 2025-10-18 00:44:54.970761

"""
from typing import Sequence, Union

from alembic import op
import sqlalchemy as sa
from sqlalchemy.dialects import postgresql

# revision identifiers, used by Alembic.
revision: str = '5d25eae17f22'
down_revision: Union[str, None] = '7dc3fbb53dac'
branch_labels: Union[str, Sequence[str], None] = None
depends_on: Union[str, Sequence[str], None] = None


def upgrade() -> None:
    """Upgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_index('ix_customer_snapshots_id', table_name='customer_snapshots')
    op.drop_table('customer_snapshots')
    op.drop_index('ix_invoices_id', table_name='invoices')
    op.drop_table('invoices')
    op.add_column('sale_invoices_lines', sa.Column('price_includes_tax', sa.BOOLEAN(), nullable=True))
    # ### end Alembic commands ###


def downgrade() -> None:
    """Downgrade schema."""
    # ### commands auto generated by Alembic - please adjust! ###
    op.drop_column('sale_invoices_lines', 'price_includes_tax')
    op.create_table('invoices',
    sa.Column('id', sa.INTEGER(), server_default=sa.text("nextval('invoices_id_seq'::regclass)"), autoincrement=True, nullable=False),
    sa.Column('user_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('invoice_type', postgresql.ENUM('STANDARD', 'SIMPLIFIED', name='invoicetype'), autoincrement=False, nullable=False),
    sa.Column('invoice_type_code', postgresql.ENUM('CREDIT_NOTE', 'DEBIT_NOTE', 'INVOICE', name='invoicetypecode'), autoincrement=False, nullable=False),
    sa.Column('issue_date', sa.DATE(), autoincrement=False, nullable=False),
    sa.Column('issue_time', sa.VARCHAR(length=15), autoincrement=False, nullable=False),
    sa.Column('document_currency_code', sa.VARCHAR(length=5), server_default=sa.text("'SAR'::character varying"), autoincrement=False, nullable=False),
    sa.Column('actual_delivery_date', sa.DATE(), autoincrement=False, nullable=True),
    sa.Column('payment_means_code', postgresql.ENUM('CASH', 'CHEQUE', 'CREDIT_TRANSFER', 'DEBIT_TRANSFER', 'PAYMENT_TO_BANK_ACCOUNT', 'BANK_CARD', name='paymentmeanscode'), autoincrement=False, nullable=False),
    sa.Column('original_invoice_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('instruction_note', sa.VARCHAR(length=4000), autoincrement=False, nullable=True),
    sa.Column('note', sa.VARCHAR(length=4000), autoincrement=False, nullable=True),
    sa.Column('tax_rate', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('classified_tax_category', sa.VARCHAR(length=5), autoincrement=False, nullable=False),
    sa.Column('line_extension_amount', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('discount_amount', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('taxable_amount', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('tax_amount', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('tax_inclusive_amount', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('payable_amount', sa.NUMERIC(), autoincrement=False, nullable=False),
    sa.Column('created_at', postgresql.TIMESTAMP(timezone=True), server_default=sa.text('now()'), autoincrement=False, nullable=True),
    sa.Column('updated_at', postgresql.TIMESTAMP(timezone=True), autoincrement=False, nullable=True),
    sa.Column('created_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('updated_by', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('signed_xml_base64', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('invoice_hash', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('uuid', sa.UUID(), autoincrement=False, nullable=True),
    sa.Column('icv', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('pih', sa.TEXT(), autoincrement=False, nullable=False),
    sa.Column('base64_qr_code', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('tax_exemption_reason_code', postgresql.ENUM('VATEX_SA_29', 'VATEX_SA_29_7', 'VATEX_SA_30', 'VATEX_SA_32', 'VATEX_SA_33', 'VATEX_SA_34_1', 'VATEX_SA_34_2', 'VATEX_SA_34_3', 'VATEX_SA_34_4', 'VATEX_SA_34_5', 'VATEX_SA_35', 'VATEX_SA_36', 'VATEX_SA_EDU', 'VATEX_SA_HEA', 'VATEX_SA_MLTRY', name='taxexemptionreasoncode'), autoincrement=False, nullable=True),
    sa.Column('tax_exemption_reason', sa.VARCHAR(length=4000), autoincrement=False, nullable=True),
    sa.Column('stage', postgresql.ENUM('PRODUCTION', 'COMPLIANCE', name='stage'), autoincrement=False, nullable=True),
    sa.Column('zatca_response', sa.TEXT(), autoincrement=False, nullable=True),
    sa.Column('status_code', sa.VARCHAR(length=5), autoincrement=False, nullable=True),
    sa.ForeignKeyConstraint(['created_by'], ['users.id'], name='invoices_created_by_fkey'),
    sa.ForeignKeyConstraint(['original_invoice_id'], ['invoices.id'], name='invoices_original_invoice_id_fkey'),
    sa.ForeignKeyConstraint(['updated_by'], ['users.id'], name='invoices_updated_by_fkey'),
    sa.ForeignKeyConstraint(['user_id'], ['users.id'], name='invoices_user_id_fkey'),
    sa.PrimaryKeyConstraint('id', name='invoices_pkey'),
    postgresql_ignore_search_path=False
    )
    op.create_index('ix_invoices_id', 'invoices', ['id'], unique=False)
    op.create_table('customer_snapshots',
    sa.Column('id', sa.INTEGER(), autoincrement=True, nullable=False),
    sa.Column('invoice_id', sa.INTEGER(), autoincrement=False, nullable=False),
    sa.Column('customer_id', sa.INTEGER(), autoincrement=False, nullable=True),
    sa.Column('registration_name', sa.VARCHAR(length=250), autoincrement=False, nullable=False),
    sa.Column('vat_number', sa.VARCHAR(length=20), autoincrement=False, nullable=True),
    sa.Column('country_code', sa.VARCHAR(length=5), server_default=sa.text("'SA'::character varying"), autoincrement=False, nullable=True),
    sa.Column('street', sa.VARCHAR(length=300), autoincrement=False, nullable=True),
    sa.Column('building_number', sa.VARCHAR(length=15), autoincrement=False, nullable=True),
    sa.Column('division', sa.VARCHAR(length=200), autoincrement=False, nullable=True),
    sa.Column('city', sa.VARCHAR(length=50), autoincrement=False, nullable=True),
    sa.Column('postal_code', sa.VARCHAR(length=10), autoincrement=False, nullable=True),
    sa.Column('party_identification_scheme', sa.VARCHAR(length=10), autoincrement=False, nullable=False),
    sa.Column('party_identification_value', sa.VARCHAR(length=30), autoincrement=False, nullable=False),
    sa.ForeignKeyConstraint(['customer_id'], ['customers.id'], name='customer_snapshots_customer_id_fkey', ondelete='RESTRICT'),
    sa.ForeignKeyConstraint(['invoice_id'], ['invoices.id'], name='customer_snapshots_invoice_id_fkey', ondelete='CASCADE'),
    sa.PrimaryKeyConstraint('id', name='customer_snapshots_pkey')
    )
    op.create_index('ix_customer_snapshots_id', 'customer_snapshots', ['id'], unique=False)
    # ### end Alembic commands ###
